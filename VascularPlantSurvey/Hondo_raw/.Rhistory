filter(year == "2019") %>%
filter(pflower == 1| !is.na(no.flowers)) %>%
select(year, plot, tag, no.flowers, no.capsules, no.eaten, no.aborted) %>%
mutate(time.surveyed = 0)
View(eaten_original)
################################################################################
#Adding in eaten data from 2019!
eaten_original <- read_csv("/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/2019 Prelim/2019_Dodecatheon_Demography_Data_Resurveys_TS3.csv")
flowering19<- Dodecatheon_16to20_wdor %>%
filter(year == "2019") %>%
filter(pflower == 1| !is.na(no.flowers)) %>%
select(year, plot, tag, no.flowers, no.capsules, no.eaten, no.aborted) %>%
mutate(time.surveyed = 0)
all_eaten <- rbind(flowering19, eaten_original) %>%
arrange(plot, tag)
View(all_eaten)
all_eaten <- left_join(flowering19, eaten_original) %>%
arrange(plot, tag)
str(eaten_original)
# get table for all flowering plants in 2019, and if they were eaten (p(eaten) = 1 or 0)
eaten_original <- eaten_original %>%
mutate(plot = as.character(plot))
flowering19<- Dodecatheon_16to20_wdor %>%
filter(year == "2019") %>%
filter(pflower == 1| !is.na(no.flowers)) %>%
select(year, plot, tag, no.flowers, no.capsules, no.eaten, no.aborted) %>%
mutate(time.surveyed = 0)
all_eaten <- left_join(flowering19, eaten_original) %>%
arrange(plot, tag)
all_eaten <- left_join(eaten_original,flowering19) %>%
arrange(plot, tag)
all_eaten <- left_join(eaten_original,flowering19) %>%
arrange(plot, tag)
all_eaten <- row_bind(eaten_original,flowering19) %>%
arrange(plot, tag)
all_eaten <- rbind(eaten_original,flowering19) %>%
arrange(plot, tag)
all_eaten <- inner_join(eaten_original,flowering19, by = tag) %>%
arrange(plot, tag)
all_eaten <- inner_join(eaten_original,flowering19, by = "tag") %>%
arrange(plot, tag)
all_eaten <- inner_join(eaten_original,flowering19, by = "tag") %>%
arrange(plot, tag)
all_eaten <- eaten_original %>%
inner_join(flowering19, by = "tag") %>%
arrange(plot, tag)
all_eaten <- inner_join(eaten_original,flowering19, by = "tag") %>%
arrange(plot, tag)
str(eaten_original)
################################################################################
#Adding in eaten data from 2019!
eaten_original <- read_csv("/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/2019 Prelim/2019_Dodecatheon_Demography_Data_Resurveys_TS3.csv")
################################################################################
#Adding in eaten data from 2019!
eaten_original <- read_csv("/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/2019 Prelim/2019_Dodecatheon_Demography_Data_Resurveys_TS3.csv")
################################################################################
#Adding in eaten data from 2019!
eaten_original <- read.csv("/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/2019 Prelim/2019_Dodecatheon_Demography_Data_Resurveys_TS3.csv")
str(eaten_original)
################################################################################
#Adding in eaten data from 2019!
eaten_original <- read.csv("/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/2019 Prelim/2019_Dodecatheon_Demography_Data_Resurveys_TS3.csv",  fileEncoding="UTF-8-BOM")
# get table for all flowering plants in 2019, and if they were eaten (p(eaten) = 1 or 0)
#what to do: get 4 time steps into eaten data
eaten_original <- eaten_original %>%
mutate(plot = as.character(plot))
flowering19<- Dodecatheon_16to20_wdor %>%
filter(year == "2019") %>%
filter(pflower == 1| !is.na(no.flowers)) %>%
select(year, plot, tag, no.flowers, no.capsules, no.eaten, no.aborted) %>%
mutate(time.surveyed = 0)
all_eaten <- inner_join(eaten_original,flowering19, by = "tag") %>%
arrange(plot, tag)
rlang::last_error()
# get table for all flowering plants in 2019, and if they were eaten (p(eaten) = 1 or 0)
#what to do: get 4 time steps into eaten data
eaten_original <- eaten_original %>%
mutate(plot = as.character(plot),
tag = as.character(tag))
flowering19<- Dodecatheon_16to20_wdor %>%
filter(year == "2019") %>%
filter(pflower == 1| !is.na(no.flowers)) %>%
select(year, plot, tag, no.flowers, no.capsules, no.eaten, no.aborted) %>%
mutate(time.surveyed = 0)
all_eaten <- inner_join(eaten_original,flowering19, by = "tag") %>%
arrange(plot, tag)
rlang::last_error()
all_eaten <- inner_join(eaten_original,flowering19, by = "tag") #%>%
all_eaten <- inner_join(eaten_original,flowering19, by = c("tag", "plot", "year") #%>%
all_eaten <- inner_join(eaten_original,flowering19, by = c("tag", "plot", "year")) #%>%
all_eaten <- inner_join(eaten_original,flowering19, by = c("tag", "plot", "year")) #%>%
all_eaten <- semi_join(flowering19, eaten_original, by = "tag") #%>%
semi_eaten <- semi_join(flowering19, eaten_original, by = "tag")
all_eaten <- rbind(semi_eaten, eaten_original)
all_eaten <- rbind(semi_eaten, eaten_original) %>%
arrange(plot, tag)
eaten <-
all_eaten %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten))
View(eaten)
eaten <-
all_eaten %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten))
all_eaten[is.na(all_eaten)] <- 0
eaten <-
all_eaten %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten))
all_eaten <-
all_eaten %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten))
eaten <- all_eaten %>% filter(time.surveyed=="3")
eaten <- all_eaten %>% filter(time.surveyed=="3") %>%
mutate(peaten = if_else(csum == 0, 0, 1))
all_eaten <-
all_eaten %>% mutate(repro = ifelse(no.flowers > 0 | capsules > 0, 1, 0)) %>%
filter(time.surveyed == 3, repro =="1") %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten))
all_eaten <- rbind(semi_eaten, eaten_original) %>%
arrange(plot, tag)
all_eaten[is.na(all_eaten)] <- 0
all_eaten <- all_eaten %>% mutate(repro = ifelse(no.flowers > 0 | capsules > 0, 1, 0)) %>%
filter(time.surveyed == 3, repro =="1") %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten))
all_eaten <- all_eaten %>% mutate(repro = ifelse(no.flowers > 0 | capsules > 0, 1, 0)) %>%
filter(time.surveyed == 3, repro =="1")# %>%
all_eaten <- all_eaten %>% mutate(repro = ifelse(no.flowers > 0 | capsules > 0, 1, 0)) %>% filter(time.surveyed == "3", repro =="1")# %>%
all_eaten <-
all_eaten %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten)) %>%
mutate(repro = ifelse(no.flowers > 0 | capsules > 0, 1, 0)) %>%
filter(time.surveyed == 3, repro =="1")
all_eaten <-
all_eaten %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten)) %>%
mutate(repro = ifelse(no.flowers > 0 | no.capsules > 0, 1, 0)) %>%
filter(time.surveyed == 3, repro =="1")
all_eaten <-
all_eaten %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten)) %>%
mutate(repro = ifelse(no.flowers > 0 | no.capsules > 0, 1, 0))# %>%
all_eaten <- rbind(semi_eaten, eaten_original) %>%
arrange(plot, tag)
all_eaten[is.na(all_eaten)] <- 0
all_eaten <-
all_eaten %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten)) %>%
mutate(repro = ifelse(no.flowers > 0 | no.capsules > 0, 1, 0))# %>%
eaten <- all_eaten %>%
mutate(peaten = if_else(repro == 0, 1, 0))
all_eaten <-
all_eaten %>%
group_by(tag) %>%
mutate(csum = cumsum(no.eaten)) %>%
mutate(repro = ifelse(no.flowers > 0 | no.capsules > 0, 1, 0)) %>%
filter(time.surveyed == "3")
eaten <- all_eaten %>%
mutate(peaten = if_else(repro == 0, 1, 0))
View(eaten)
source('C:/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/dode_allyears_cleaned.R')
View(all_eaten)
View(eaten)
eaten <- eaten %>%
select(c(year, plot, tag, peaten))
star <- star %>%
left_join(star, eaten, by = c(year, tag))
star <- Dodecatheon_16to20_wdor
star <- star %>%
left_join(star, eaten, by = c(year, tag))
View(star)
str(star)
str(eaten)
star <- star %>%
left_join(star, eaten, by = c("year", "tag"))
star <- Dodecatheon_16to20_wdor
star <- star %>%
left_join(star, eaten, by = c("year", "tag"))
star <- Dodecatheon_16to20_wdor
eaten <- all_eaten %>%
mutate(peaten = if_else(repro == 0, 1, 0))
eaten <- eaten %>%
select(c(year, tag, peaten))
star <- Dodecatheon_16to20_wdor
star <- star %>%
left_join(star, eaten, by = c("year", "tag"))
star <- Dodecatheon_16to20_wdor
star <- star %>%
left_join(eaten, star, by = c("year", "tag"))
Tzero<-star
Tzero<-subset(Tzero, select = -c(ht, leaves, lv.length, rosetteL, rosetteW, notes, no.eaten, no.aborted))
Tone<-star
Tone<-subset(Tone, select = -c(ht, plot, Xcoor, Ycoor, YrTag, lv.length, leaves, rosetteL, rosetteW, notes, trt, no.capsules, no.eaten, no.aborted))
names(Tzero) <- sub("no.flowers", "no.flowersT0", names(Tzero))
names(Tzero) <- sub("capsules", "capsulesT0", names(Tzero))
names(Tzero) <- sub("pflower", "pflowerT0", names(Tzero)) #probability of flowering
names(Tzero) <- sub("ros.area", "ros.areaT0", names(Tzero))
names(Tzero) <- sub("psurvival", "psurvivalT0", names(Tzero))
names(Tzero) <- sub("life_st", "life_stT0", names(Tzero))
names(Tone) <- sub("no.flowers", "no.flowersT1", names(Tone))
names(Tone) <- sub("ros.area", "ros.areaT1", names(Tone))
names(Tone) <- sub("pflower", "pflowerT1", names(Tone)) #probability of flowering
names(Tone) <- sub("psurvival", "psurvivalT1", names(Tone))
names(Tone) <- sub("life_st", "life_stT1", names(Tone))
Tone$year <- Tone$year - 1
star2 <- merge(Tzero, Tone, by=c("tag","year"), all.x=TRUE)
View(star2)
View(Tzero)
Tzero<-star
Tzero<-subset(Tzero, select = -c(ht, leaves, lv.length, rosetteL, rosetteW, notes, no.eaten, no.aborted))
Tone<-star
Tone<-subset(Tone, select = -c(ht, plot, Xcoor, Ycoor, YrTag, lv.length, leaves, rosetteL, rosetteW, notes, trt, no.capsules, no.eaten, no.aborted))
names(Tzero) <- sub("no.flowers", "no.flowersT0", names(Tzero))
names(Tzero) <- sub("capsules", "capsulesT0", names(Tzero))
names(Tzero) <- sub("pflower", "pflowerT0", names(Tzero)) #probability of flowering
names(Tzero) <- sub("ros.area", "ros.areaT0", names(Tzero))
names(Tzero) <- sub("psurvival", "psurvivalT0", names(Tzero))
names(Tzero) <- sub("life_st", "life_stT0", names(Tzero))
names(Tzero) <- sub("peaten", "peatenT0", names(Tzero))
names(Tone) <- sub("no.flowers", "no.flowersT1", names(Tone))
names(Tone) <- sub("ros.area", "ros.areaT1", names(Tone))
names(Tone) <- sub("pflower", "pflowerT1", names(Tone)) #probability of flowering
names(Tone) <- sub("psurvival", "psurvivalT1", names(Tone))
names(Tone) <- sub("life_st", "life_stT1", names(Tone))
names(Tone) <- sub("peaten", "peatenT1", names(Tone))
Tone$year <- Tone$year - 1
star2 <- merge(Tzero, Tone, by=c("tag","year"), all.x=TRUE)
write.csv(star2, "C:/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/AllYears_Dodecatheon_Demography_fates_Oct6.csv",  row.names=F)
#write.csv(star2, "C:/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/AllYears_Dodecatheon_Demography_fates_Oct6.csv",  row.names=F)
write.csv(star2, "C:/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/AllYears_Dodecatheon_Demography_fates.csv",  row.names=F)
#suppressPackageStartupMessages(library(lme4))
#suppressPackageStartupMessages(library(popbio))
star <- read.csv("C:/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/AllYears_Dodecatheon_Demography.csv")
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(lme4))
suppressPackageStartupMessages(library(popbio))
suppressPackageStartupMessages(library(AICcmodavg))
theme_set(theme_classic())
suppressPackageStartupMessages(library(wesanderson))
suppressPackageStartupMessages(library(ggeffects))
FF <- wes_palettes$FantasticFox1
library(ggeffects) #for reg line in ggplot
dodec <- read.csv("C:/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/AllYears_Dodecatheon_Demography_fates.csv")
dodec <- dodec %>%
mutate(year = as.factor(year),
plot = as.factor(plot))
dodec <- read.csv("C:/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/AllYears_Dodecatheon_Demography_fates.csv")
dodec <- dodec %>%
mutate(year = as.factor(year),
plot = as.factor(plot))
View(dodec)
eaten_1 <- lm(pflowerT1~peatenT0)
eaten_1 <- lm(pflowerT1~peatenT0, data = dodec)
summary(eaten_1)
eaten_1 <- lm(peatenT0~pflowerT1, data = dodec)
summary(eaten_1)
dodec %>%
ggplot(aes(peatenT0, pflowerT1))+
geom_point()+
geom_smooth()
eaten_1 <- glm(peatenT0~pflowerT1, data = dodec, , family = "binomial")
summary(eaten_1)
eaten_1 <- glm(peatenT0~pflowerT1, data = dodec , family = "binomial")
summary(eaten_1)
eaten_1 <- glm(pflowerT1~peatenT0, data = dodec , family = "binomial")
summary(eaten_1)
anova(eaten1)
anova(eaten_1)
# Did beign eaten affect how mnay flowers produced the next year?
eaten_2 <- lm(no.flowersT1 ~ peatenTo, data = dodec)
# Did beign eaten affect how mnay flowers produced the next year?
eaten_2 <- lm(no.flowersT1 ~ peatenT0, data = dodec)
summary(eaten_2)
anova(eaten_2)
eaten_3 <- glm(pflowerT1~peatenT0 +trt, data = dodec , family = "binomial")
summary(eaten_3)
anova(eaten_3)
summary(eaten_3)
summary(eaten_1)
# Did being eaten affect how mnay flowers produced the next year?
eaten_2 <- lm(no.flowersT1 ~ peatenT0, data = dodec)
anova(eaten_2)
summary(eaten_2)
eaten_3 <- glm(pflowerT1~peatenT0 +log(ros.areaT0), data = dodec , family = "binomial")
summary(eaten_3)
anova(eaten_3)
summary(eaten_3)
install.packages("installr")
library(installr)
install.packages(c("dplyr", "rmarkdown", "tibble", "tidyr", "tinytex"))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(lme4))
suppressPackageStartupMessages(library(popbio))
suppressPackageStartupMessages(library(AICcmodavg))
theme_set(theme_classic())
suppressPackageStartupMessages(library(wesanderson))
suppressPackageStartupMessages(library(ggeffects))
FF <- wes_palettes$FantasticFox1
library(ggeffects) #for reg line in ggplot
dodec <- read.csv("C:/Users/Jenna/Dropbox/Jenna/fall_dode/dode/Dodecatheon_data/AllYears_Dodecatheon_Demography_fates.csv")
dodec <- dodec %>%
mutate(year = as.factor(year),
plot = as.factor(plot))
dodec <- dodec %>%
filter(is.na(life_stT0) | life_stT0 != "Dor",
is.na(life_stT1) |life_stT1 != "Dor") #otherwise it drops the NA's too!
fm1 <- glmer(pflowerT1 ~ log(ros.areaT0) + (1|plot), data = dodec, family = "binomial")
fm2 <- glmer(pflowerT1 ~ log(ros.areaT0) + (1|year)+ (1|plot), data = dodec, family = "binomial")
fm3 <- glmer(pflowerT1 ~ log(ros.areaT0)*trt + (1|year)+ (1|plot), data = dodec, family = "binomial")
fm4 <- glmer(pflowerT1 ~ log(ros.areaT0) +trt+ (1|year)+ (1|plot), data = dodec, family = "binomial")
fm5 <- glmer(pflowerT1 ~ log(ros.areaT0) +pflowerT0+ (1|year)+ (1|plot), data = dodec, family = "binomial")
fm6 <- glmer(pflowerT1 ~ log(ros.areaT0)*pflowerT0 + (1|year)+ (1|plot), data = dodec, family = "binomial")
fm7 <- glmer(pflowerT1 ~ log(ros.areaT0) + pflowerT0 + trt + (1|year)+ (1|plot), data = dodec, family = "binomial")
fm8 <- glmer(pflowerT1 ~ log(ros.areaT0) + pflowerT0*trt + (1|year)+ (1|plot), data = dodec, family = "binomial")
flowering <- lst(fm1, fm2, fm3, fm4, fm5, fm6, fm7, fm8)
flowering_AICc<-aictab(cand.set = flowering, modnames = NULL,second.ord=TRUE,nobs=NULL,sort=TRUE)
summary(fm6)
anova(fm6, fm2)
View(flowering_AICc)
### LIBRARIES ###
library(tidyverse)
library(janitor)
install.packages("janitor")
setwd("C:/Users/Jenna/OneDrive - The University Of British Columbia/LDP/Data to clean/Vascular Plant Surveys")
# open a connection to the file we want to read in
con <- file('../../../../Stand 1/HONDO181.aug')
open(con)
# open a connection to the file we want to read in
con <- file('../../../../Stand 1/HONDO181.AUG')
open(con)
# open a connection to the file we want to read in
con <- file('../../../../Stand 1/HONDO181_AUG')
open(con)
# open a connection to the file we want to read in
con <- file('../../../../Desktop/HONDO181.AUG')
open(con)
# open a connection to the file we want to read in
con <- file('../../../../HONDO181.AUG')
open(con)
# open a connection to the file we want to read in
con <- file('C:/Users/Jenna/OneDrive - The University Of British Columbia/LDP/Data to clean/Vascular Plant Surveys/Stand 1/HONDO181.AUG')
open(con)
# open a connection to the file we want to read in
con <- file('C:/Users/Jenna/OneDrive - The University Of British Columbia/LDP/Data to clean/Vascular Plant Surveys/Stand 1/HONDO181.AUG.txt')
open(con)
# make a list to put the results into
results.list <- list()
# start with the first line in the file and cycle through all of them
current.line <- 1
while (length(line <- readLines(con, n = 1, warn = FALSE)) > 0) {
results.list[[current.line]] <- line
current.line <- current.line + 1
}
# close the connection to the file
close(con)
# remove remaining white spaces
results.list <- lapply(results.list, str_trim, side = "both") %>%
lapply(., str_squish)
# save first list as metadata to be attached later
# are all the first rows metadata?
metadata <- results.list[[1]]
# get the rows after the metadata and unlist them so each value gets read
# separately; otherwise, each row is one big long character string
split_list <- lapply(results.list[2:length(results.list)],
unlist(str_split),
pattern = " ")
# in order to bind the list together as rows, they need to be the same length.
# it would probably be better to not hard-code the 26 and allow flexiblity
# for files that might have different row lengths
for (i in 1:length(split_list)){
# for lists that start with "QUAD," remove repeats and only take
# the first 26 objects in the list
# should fix to remove any objects with lowercase letters specifically
if (split_list[[i]][[1]][1] == 'QUAD'){
split_list[[i]] = split_list[[i]][[1]][1:26]
# for lists that are empty, put 26 NAs in them
} else if (split_list[[i]][[1]][1] == "") {
split_list[[i]][[1]][1:26] <- NA
}
}
# stitch lists together to act as rows in a dataframe
data <- data.frame(matrix(unlist(split_list),
nrow = length(split_list),
byrow = T)) %>%
# remove the empty rows
drop_na() %>%
# make the first row ("QUAD") into the column names
janitor::row_to_names(., row_number = 1) %>%
# remove any remaining "QUAD" rows
filter(QUAD != "QUAD")
# make a list to keep metadata together
data_and_metadata <- list(data, metadata)
View(data)
View(data_and_metadata)
View(split_list)
View(results.list)
View(data)
View(data)
# open a connection to the file we want to read in
con <- file('C:/Users/Jenna/OneDrive - The University Of British Columbia/LDP/Data to clean/Vascular Plant Surveys/Stand 1/HONDO181.JUL.txt')
open(con)
# open a connection to the file we want to read in
con <- file('C:/Users/Jenna/OneDrive - The University Of British Columbia/LDP/Data to clean/Vascular Plant Surveys/Stand 1/HONDO181.JUL.txt')
open(con)
# make a list to put the results into
results.list <- list()
# start with the first line in the file and cycle through all of them
current.line <- 1
while (length(line <- readLines(con, n = 1, warn = FALSE)) > 0) {
results.list[[current.line]] <- line
current.line <- current.line + 1
}
# close the connection to the file
close(con)
# remove remaining white spaces
results.list <- lapply(results.list, str_trim, side = "both") %>%
lapply(., str_squish)
# save first list as metadata to be attached later
# are all the first rows metadata?
metadata <- results.list[[1]]
# get the rows after the metadata and unlist them so each value gets read
# separately; otherwise, each row is one big long character string
split_list <- lapply(results.list[2:length(results.list)],
unlist(str_split),
pattern = " ")
# in order to bind the list together as rows, they need to be the same length.
# it would probably be better to not hard-code the 26 and allow flexiblity
# for files that might have different row lengths
for (i in 1:length(split_list)){
# for lists that start with "QUAD," remove repeats and only take
# the first 26 objects in the list
# should fix to remove any objects with lowercase letters specifically
if (split_list[[i]][[1]][1] == 'QUAD'){
split_list[[i]] = split_list[[i]][[1]][1:26]
# for lists that are empty, put 26 NAs in them
} else if (split_list[[i]][[1]][1] == "") {
split_list[[i]][[1]][1:26] <- NA
}
}
# stitch lists together to act as rows in a dataframe
data <- data.frame(matrix(unlist(split_list),
nrow = length(split_list),
byrow = T)) %>%
# remove the empty rows
drop_na() %>%
# make the first row ("QUAD") into the column names
janitor::row_to_names(., row_number = 1) %>%
# remove any remaining "QUAD" rows
filter(QUAD != "QUAD")
source('C:/Users/Jenna/OneDrive - The University Of British Columbia/LDP/Data to clean/Vascular Plant Surveys/UofA_plants.R')
# open a connection to the file we want to read in
con <- file('C:/Users/Jenna/OneDrive - The University Of British Columbia/LDP/Data to clean/Vascular Plant Surveys/Stand 1/HONDO181.JUL.txt')
open(con)
# make a list to put the results into
results.list <- list()
# open a connection to the file we want to read in
con <- file('C:/Users/Jenna/OneDrive - The University Of British Columbia/LDP/Data to clean/Vascular Plant Surveys/Stand 1/HONDO181.AUG.txt')
open(con)
# make a list to put the results into
results.list <- list()
# start with the first line in the file and cycle through all of them
current.line <- 1
while (length(line <- readLines(con, n = 1, warn = FALSE)) > 0) {
results.list[[current.line]] <- line
current.line <- current.line + 1
}
# close the connection to the file
close(con)
# remove remaining white spaces
results.list <- lapply(results.list, str_trim, side = "both") %>%
lapply(., str_squish)
# save first list as metadata to be attached later
# are all the first rows metadata?
metadata <- results.list[[1]]
# get the rows after the metadata and unlist them so each value gets read
# separately; otherwise, each row is one big long character string
split_list <- lapply(results.list[2:length(results.list)],
unlist(str_split),
pattern = " ")
View(results.list)
# in order to bind the list together as rows, they need to be the same length.
# it would probably be better to not hard-code the 26 and allow flexiblity
# for files that might have different row lengths
for (i in 1:length(split_list)){
# for lists that start with "QUAD," remove repeats and only take
# the first 26 objects in the list
# should fix to remove any objects with lowercase letters specifically
if (split_list[[i]][[1]][1] == 'QUAD'){
split_list[[i]] = split_list[[i]][[1]][1:26]
# for lists that are empty, put 26 NAs in them
} else if (split_list[[i]][[1]][1] == "") {
split_list[[i]][[1]][1:26] <- NA
}
}
# stitch lists together to act as rows in a dataframe
data <- data.frame(matrix(unlist(split_list),
nrow = length(split_list),
byrow = T)) %>%
# remove the empty rows
drop_na() %>%
# make the first row ("QUAD") into the column names
janitor::row_to_names(., row_number = 1) %>%
# remove any remaining "QUAD" rows
filter(QUAD != "QUAD")
